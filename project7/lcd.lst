   1               		.file	"lcd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	GetLCDDRValues
  12               	GetLCDDRValues:
  13               	.LFB1:
  14               		.file 1 "lcd.c"
   1:lcd.c         **** /******************************************************************************
   2:lcd.c         ****  * File Name:	lcd.c
   3:lcd.c         ****  * Program:		EEPROMAccess for Fundamentals of Embedded Systems class
   4:lcd.c         ****  * Author:		Robert Weber, Tom Lill
   5:lcd.c         ****  * Purpose:		Contains control functions for LCD on STK502
   6:lcd.c         ****  *
   7:lcd.c         ****  *  Date		Changed by:	Changes:
   8:lcd.c         ****  * ---------	-----------	-------------------------------------------------------
   9:lcd.c         ****  * 18 Feb 04	T Lill		modified for Winter 04 session
  10:lcd.c         ****  * 16 Aug 04	T Lill		added '?' and '*' to NumSegments array
  11:lcd.c         ****  * 21 Nov 05	T Lill		expanded LCD character table to include '*' to 'z'
  12:lcd.c         ****  * 08 May 06	T Lill		replaced signal.h with interrupt.h
  13:lcd.c         ****  * 14 Nov 06	T Lill		redefined @ as 'hourglass'
  14:lcd.c         ****  * 15 Mar 07	T Lill		removed LCD message handlers.  Expanded LCD character
  15:lcd.c         ****  *							table.  '@'
  16:lcd.c         ****  * 16 Nov 07	T Lill		simplified extraction of LCD segment data from EERROM.
  17:lcd.c         ****  *							extended check for allowable LCD characters to include
  18:lcd.c         ****  *							the entire character table.  removed temporary variable
  19:lcd.c         ****  *							from initialization of control registers.
  20:lcd.c         ****  * 04 Dec 07	T Lill		Corrected error in test for valid LCD characters.
  21:lcd.c         ****  * 09 Nov 10	T Lill		Modified for use with ATmega2560, which does not have
  22:lcd.c         ****  *							LCD capability.  Just used for data access.
  23:lcd.c         ****  ******************************************************************************/
  24:lcd.c         **** 
  25:lcd.c         **** /********************************* Includes ***********************************/
  26:lcd.c         **** #include <avr/io.h>
  27:lcd.c         **** #include <avr/interrupt.h>
  28:lcd.c         **** #include <string.h>
  29:lcd.c         **** #include <avr/pgmspace.h>
  30:lcd.c         **** 
  31:lcd.c         **** #include "interrpt.h"
  32:lcd.c         **** #include "errors.h"
  33:lcd.c         **** #include "lib.h"
  34:lcd.c         **** #include "lcd.h"
  35:lcd.c         **** #include "my_eeprom.h"
  36:lcd.c         **** 
  37:lcd.c         **** /* **************************** Constant definitions *************************/
  38:lcd.c         **** 
  39:lcd.c         **** 
  40:lcd.c         **** /******************************** Global variables ***************************/
  41:lcd.c         **** 
  42:lcd.c         **** /*
  43:lcd.c         ****  * This array defines what segments need to be turned on for each character.
  44:lcd.c         ****  * The lowest nibble gets written to the lowest LCDDR register, the highest
  45:lcd.c         ****  * nibble to the highest LCDDR register.
  46:lcd.c         ****  * There are 55 entries in the table, so 110 bytes of eeprom are used up.
  47:lcd.c         ****  * Of course, the ATmega2560 doesn't have an LCD.  But if it did, this
  48:lcd.c         ****  * would be useful for minimizing RAM usage.
  49:lcd.c         ****  */
  50:lcd.c         **** // ASSIGNMENT:  store this array in the EEPROM, not in text space or RAM
  51:lcd.c         **** 
  52:lcd.c         **** const unsigned int LCDSegments[] =
  53:lcd.c         **** {
  54:lcd.c         **** 	0xEAA8,		// '*'
  55:lcd.c         **** 	0x2A80,		// '+'
  56:lcd.c         **** 	0x4000,		// ','
  57:lcd.c         **** 	0x0A00,		// '-'
  58:lcd.c         **** 	0x2000,		// '.'
  59:lcd.c         **** 	0x4008,		// '/'
  60:lcd.c         **** 	0x5559,		// '0'
  61:lcd.c         **** 	0x0118,		// '1'
  62:lcd.c         **** 	0x1e11,		// '2'
  63:lcd.c         **** 	0x1b11,		// '3'
  64:lcd.c         **** 	0x0b50,		// '4'
  65:lcd.c         **** 	0x1b41,		// '5'
  66:lcd.c         **** 	0x1f41,		// '6'
  67:lcd.c         **** 	0x0111,		// '7'
  68:lcd.c         **** 	0x1f51,		// '8'
  69:lcd.c         **** 	0x1b51,		// '9'
  70:lcd.c         **** 	0x2080,		// ':'
  71:lcd.c         **** 	0x4080,		// ';'
  72:lcd.c         **** 	0x8008,		// '<'
  73:lcd.c         **** 	0x1001,		// '='
  74:lcd.c         **** 	0x4020,		// '>'
  75:lcd.c         **** 	0x2811,		// '?'
  76:lcd.c         **** 	0xD029,		// '@' (Not defined: display 'hourglass')
  77:lcd.c         **** 	0x0f51,		// 'A'
  78:lcd.c         **** 	0x3991,		// 'B'
  79:lcd.c         **** 	0x1441,		// 'C'
  80:lcd.c         **** 	0x3191,		// 'D'
  81:lcd.c         **** 	0x1e41,		// 'E'
  82:lcd.c         **** 	0x0e41,		// 'F'
  83:lcd.c         **** 	0x1d41,		// 'G'
  84:lcd.c         **** 	0x0f50,		// 'H'
  85:lcd.c         **** 	0x2080,		// 'I'
  86:lcd.c         **** 	0x1510,		// 'J'
  87:lcd.c         **** 	0x8648,		// 'K'
  88:lcd.c         **** 	0x1440,		// 'L'
  89:lcd.c         **** 	0x0578,		// 'M'
  90:lcd.c         **** 	0x8570,		// 'N'
  91:lcd.c         **** 	0x1551,		// 'O'
  92:lcd.c         **** 	0x0e51,		// 'P'
  93:lcd.c         **** 	0x9551,		// 'Q'
  94:lcd.c         **** 	0x8e51,		// 'R'
  95:lcd.c         **** 	0x9021,		// 'S'
  96:lcd.c         **** 	0x2081,		// 'T'
  97:lcd.c         **** 	0x1550,		// 'U'
  98:lcd.c         **** 	0x4448,		// 'V'
  99:lcd.c         **** 	0xc550,		// 'W'
 100:lcd.c         **** 	0xc028,		// 'X'
 101:lcd.c         **** 	0x2028,		// 'Y'
 102:lcd.c         **** 	0x5009,		// 'Z'
 103:lcd.c         **** 	0x1441,		// '['
 104:lcd.c         **** 	0x8020,		// '\'
 105:lcd.c         **** 	0x1111,		// ']'
 106:lcd.c         **** 	0xC000,		// '^'
 107:lcd.c         **** 	0x1000,		// '_'
 108:lcd.c         **** 	0x0008		// '''
 109:lcd.c         **** };
 110:lcd.c         **** 
 111:lcd.c         **** /**************************** Function prototypes ****************************/
 112:lcd.c         **** 
 113:lcd.c         **** /******************************************************************************
 114:lcd.c         ****  * Get values for LCDDR registers
 115:lcd.c         ****  *****************************************************************************/
 116:lcd.c         **** eErrorType GetLCDDRValues(char LCDChar,
 117:lcd.c         **** 			   char *LCDDRx, char *LCDDRx5, char *LCDDRx10, char *LCDDRx15)
 118:lcd.c         **** {
  15               		.loc 1 118 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
 119:lcd.c         **** 	int index;
 120:lcd.c         **** 
 121:lcd.c         **** 	if (LCDChar == ' ')
  30               		.loc 1 121 0
  31 0004 8032      		cpi r24,lo8(32)
  32 0006 01F4      		brne .L2
 122:lcd.c         **** 	{
 123:lcd.c         **** 		*LCDDRx   = 0x00;
  33               		.loc 1 123 0
  34 0008 FB01      		movw r30,r22
  35 000a 1082      		st Z,__zero_reg__
 124:lcd.c         **** 		*LCDDRx5  = 0x00;
  36               		.loc 1 124 0
  37 000c FA01      		movw r30,r20
  38 000e 1082      		st Z,__zero_reg__
 125:lcd.c         **** 		*LCDDRx10 = 0x00;
  39               		.loc 1 125 0
  40 0010 F901      		movw r30,r18
  41 0012 1082      		st Z,__zero_reg__
 126:lcd.c         **** 		*LCDDRx15 = 0x00;
  42               		.loc 1 126 0
  43 0014 F801      		movw r30,r16
  44 0016 1082      		st Z,__zero_reg__
  45 0018 00C0      		rjmp .L5
  46               	.L2:
 127:lcd.c         **** 		return NO_ERROR;
 128:lcd.c         **** 	}
 129:lcd.c         **** 
 130:lcd.c         **** 	else if ((LCDChar >= '*') && (LCDChar <= '`'))
  47               		.loc 1 130 0
  48 001a 8A52      		subi r24,lo8(-(-42))
  49               	.LVL1:
  50 001c 8135      		cpi r24,lo8(81)
  51 001e 00F4      		brsh .L4
  52               	.LVL2:
  53               	.L5:
 131:lcd.c         **** 	{
 132:lcd.c         **** 		index = LCDChar - '*';
 133:lcd.c         **** 	}
 134:lcd.c         **** 
 135:lcd.c         **** 	else if ((LCDChar >= 'a' ) && (LCDChar <= 'z'))
 136:lcd.c         **** 	{
 137:lcd.c         **** 		// Convert to upper case
 138:lcd.c         **** 		index = LCDChar - '*' - 0x20;
 139:lcd.c         **** 	}
 140:lcd.c         **** 
 141:lcd.c         **** 	else
 142:lcd.c         **** 	{
 143:lcd.c         **** 		return LCD_INVALID_CHAR;
 144:lcd.c         **** 	}
 145:lcd.c         **** 	/*
 146:lcd.c         **** 	 * The character is valid but not a space, so load the registers.
 147:lcd.c         **** 	 *
 148:lcd.c         **** 	 * ASSIGNMENT:  fetch the segment data for the selected character
 149:lcd.c         **** 	 * from EEPROM.  It will be sent to the terminal for display.
 150:lcd.c         **** 	 */
 151:lcd.c         **** 
 152:lcd.c         **** 	return NO_ERROR;
  54               		.loc 1 152 0
  55 0020 80E0      		ldi r24,0
  56 0022 00C0      		rjmp .L3
  57               	.LVL3:
  58               	.L4:
 143:lcd.c         **** 	}
  59               		.loc 1 143 0
  60 0024 8CE0      		ldi r24,lo8(12)
  61               	.LVL4:
  62               	.L3:
  63               	/* epilogue start */
 153:lcd.c         **** }
  64               		.loc 1 153 0
  65 0026 1F91      		pop r17
  66 0028 0F91      		pop r16
  67               	.LVL5:
  68 002a 0895      		ret
  69               		.cfi_endproc
  70               	.LFE1:
  72               	.global	GetLCDTableSize
  74               	GetLCDTableSize:
  75               	.LFB2:
 154:lcd.c         **** 
 155:lcd.c         **** unsigned GetLCDTableSize(void)
 156:lcd.c         **** {
  76               		.loc 1 156 0
  77               		.cfi_startproc
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
 157:lcd.c         **** 	return sizeof(LCDSegments);
 158:lcd.c         **** }
  82               		.loc 1 158 0
  83 002c 8EE6      		ldi r24,lo8(110)
  84 002e 90E0      		ldi r25,0
  85 0030 0895      		ret
  86               		.cfi_endproc
  87               	.LFE2:
  89               	.global	LCDSegments
  90               		.section	.rodata
  93               	LCDSegments:
  94 0000 A8EA      		.word	-5464
  95 0002 802A      		.word	10880
  96 0004 0040      		.word	16384
  97 0006 000A      		.word	2560
  98 0008 0020      		.word	8192
  99 000a 0840      		.word	16392
 100 000c 5955      		.word	21849
 101 000e 1801      		.word	280
 102 0010 111E      		.word	7697
 103 0012 111B      		.word	6929
 104 0014 500B      		.word	2896
 105 0016 411B      		.word	6977
 106 0018 411F      		.word	8001
 107 001a 1101      		.word	273
 108 001c 511F      		.word	8017
 109 001e 511B      		.word	6993
 110 0020 8020      		.word	8320
 111 0022 8040      		.word	16512
 112 0024 0880      		.word	-32760
 113 0026 0110      		.word	4097
 114 0028 2040      		.word	16416
 115 002a 1128      		.word	10257
 116 002c 29D0      		.word	-12247
 117 002e 510F      		.word	3921
 118 0030 9139      		.word	14737
 119 0032 4114      		.word	5185
 120 0034 9131      		.word	12689
 121 0036 411E      		.word	7745
 122 0038 410E      		.word	3649
 123 003a 411D      		.word	7489
 124 003c 500F      		.word	3920
 125 003e 8020      		.word	8320
 126 0040 1015      		.word	5392
 127 0042 4886      		.word	-31160
 128 0044 4014      		.word	5184
 129 0046 7805      		.word	1400
 130 0048 7085      		.word	-31376
 131 004a 5115      		.word	5457
 132 004c 510E      		.word	3665
 133 004e 5195      		.word	-27311
 134 0050 518E      		.word	-29103
 135 0052 2190      		.word	-28639
 136 0054 8120      		.word	8321
 137 0056 5015      		.word	5456
 138 0058 4844      		.word	17480
 139 005a 50C5      		.word	-15024
 140 005c 28C0      		.word	-16344
 141 005e 2820      		.word	8232
 142 0060 0950      		.word	20489
 143 0062 4114      		.word	5185
 144 0064 2080      		.word	-32736
 145 0066 1111      		.word	4369
 146 0068 00C0      		.word	-16384
 147 006a 0010      		.word	4096
 148 006c 0800      		.word	8
 149               		.text
 150               	.Letext0:
 151               		.file 2 "errors.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 lcd.c
     /tmp/ccBMWAQt.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccBMWAQt.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccBMWAQt.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccBMWAQt.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccBMWAQt.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccBMWAQt.s:12     .text:0000000000000000 GetLCDDRValues
     /tmp/ccBMWAQt.s:74     .text:000000000000002c GetLCDTableSize
     /tmp/ccBMWAQt.s:93     .rodata:0000000000000000 LCDSegments

UNDEFINED SYMBOLS
__do_copy_data
